{"version":3,"sources":["component/layout/MetaData.js","component/layout/Loader/Loader.js","component/User/UpdateProfile.js"],"names":["MetaData","title","Loader","className","UpdateProfile","history","dispatch","useDispatch","alert","useAlert","user","useSelector","state","profile","error","isUpdated","loading","useState","name","setName","email","setEmail","avatar","setAvatar","avatarPreview","setAvatarPreview","useEffect","url","clearErrors","success","loadUser","push","type","UPDATE_PROFILE_RESET","encType","onSubmit","e","preventDefault","myForm","FormData","set","updateProfile","placeholder","required","value","onChange","target","style","objectFit","margin","src","width","alt","id","accept","event","files","reader","FileReader","onload","readyState","old","result","readAsDataURL","size","a","imageFile","options","maxSizeMB","maxWidthOrHeight","useWebWorker","initialQuality","fileType","imageCompression","compressedFile","getDataUrlFromFile","then","res","console","log","handleImageUpload","img","fileReader","withoutCompress","marginTop"],"mappings":"uGAAA,yBAWeA,IARE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAClB,OACE,cAAC,IAAD,UACE,gCAAQA,Q,iCCNd,uBAWeC,IARA,WACb,OACE,qBAAKC,UAAU,UAAf,SACE,4B,qPCoKSC,UA9JO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACjBC,EAAWC,cACXC,EAAQC,cAENC,EAASC,aAAY,SAACC,GAAD,OAAWA,EAAMF,QAAtCA,KACR,EAAsCC,aAAY,SAACC,GAAD,OAAWA,EAAMC,WAA3DC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UAAWC,EAA1B,EAA0BA,QAE1B,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAA0CN,mBAAS,gBAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KAsFA,OAvBAC,qBAAU,WACJhB,IACFS,EAAQT,EAAKQ,MACbG,EAASX,EAAKU,OACdK,EAAiBf,EAAKY,OAAOK,MAG3Bb,IACFN,EAAMM,MAAMA,GACZR,EAASsB,gBAGPb,IACFP,EAAMqB,QAAQ,gCACdvB,EAASwB,eAETzB,EAAQ0B,KAAK,YAEbzB,EAAS,CACP0B,KAAMC,SAGT,CAAC3B,EAAUQ,EAAON,EAAOH,EAASK,EAAMK,IAEzC,cAAC,WAAD,UACGC,EACC,cAAC,IAAD,IAEA,eAAC,WAAD,WACE,cAAC,IAAD,CAAUf,MAAM,mBAChB,qBAAKE,UAAU,yBAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,oBAAIA,UAAU,uBAAd,4BAEA,uBACEA,UAAU,oBACV+B,QAAQ,sBACRC,SAlGc,SAACC,GAC3BA,EAAEC,iBACF,IAAMC,EAAS,IAAIC,SACnBD,EAAOE,IAAI,OAAQtB,GACnBoB,EAAOE,IAAI,QAASpB,GACpBkB,EAAOE,IAAI,SAAUlB,GACrBhB,EAASmC,YAAcH,KAyFb,UAKE,sBAAKnC,UAAU,oBAAf,UACE,cAAC,IAAD,IACA,uBACE6B,KAAK,OACLU,YAAY,OACZC,UAAQ,EACRzB,KAAK,OACL0B,MAAO1B,EACP2B,SAAU,SAACT,GAAD,OAAOjB,EAAQiB,EAAEU,OAAOF,aAGtC,sBAAKzC,UAAU,qBAAf,UACE,cAAC,IAAD,IACA,uBACE6B,KAAK,QACLU,YAAY,QACZC,UAAQ,EACRzB,KAAK,QACL0B,MAAOxB,EACPyB,SAAU,SAACT,GAAD,OAAOf,EAASe,EAAEU,OAAOF,aAGvC,qBAAKG,MAAO,CAAEC,UAAW,UAAWC,OAAQ,YAAcC,IAAK1B,EAAe2B,MAAM,MAAMC,IAAI,mBAC9F,qBAAKC,GAAG,qBAAR,SACE,uBACErB,KAAK,OACLd,KAAK,SACLoC,OAAO,UACPT,SAxHc,SAACU,GAC/B,IAeMnB,EAAImB,EAAMT,OAAOU,MAAM,GAC7B,GAAe,eAAXpB,EAAEJ,MAAoC,cAAXI,EAAEJ,MAAmC,cAAXI,EAAEJ,MAAmC,cAAXI,EAAEJ,MAAmC,eAAXI,EAAEJ,KAAuB,CACpI,IAAMyB,EAAS,IAAIC,WAOnB,GANAD,EAAOE,OAAS,WACY,IAAtBF,EAAOG,YACTnC,GAAiB,SAACoC,GAAD,4BAAaA,GAAb,CAAkBJ,EAAOK,aAG9CL,EAAOM,cAAc3B,GACjBA,EAAE4B,KAAO,KAAO,uCAClB,WAAiCT,GAAjC,mBAAAU,EAAA,6DACQC,EAAYX,EACZY,EAAU,CACdC,UAAW,EACXC,iBAAkB,KAClBC,cAAc,EACdC,eAAgB,GAChBC,SAAU,cAPd,kBAUiCC,YAAiBP,EAAWC,GAV7D,OAUUO,EAVV,OAWID,IAAiBE,mBAAmBD,GAAgBE,MAAK,SAAAC,GACvDtD,EAAUsD,GACVpD,EAAiBoD,MAbvB,gDAgBIC,QAAQC,IAAR,MAhBJ,yDADkB,sDAoBlBC,CAAkB5C,QA5CE,SAAC6C,GACvB,GAAIA,EAAK,CACP,IAAMC,EAAa,IAAIxB,WACvBwB,EAAWvB,OAAS,SAACvB,GACnB,IAAQ0B,EAAW1B,EAAEU,OAAbgB,OACsB,IAA1BoB,EAAWtB,YACbnC,EAAiByD,EAAWpB,QAE1BA,GACFvC,EAAUuC,IAGdoB,EAAWnB,cAAckB,IAkCzBE,CAAgB/C,QAGlB5B,EAAMM,MAAM,4DAyEF,uBACEkB,KAAK,SACLY,MAAM,SACNzC,UAAU,mBACV4C,MAAO,CAAEqC,UAAW","file":"static/js/45.97f6dfaf.chunk.js","sourcesContent":["import React from \"react\";\nimport Helmet from \"react-helmet\";\n\nconst MetaData = ({ title }) => {\n  return (\n    <Helmet>\n      <title>{title}</title>\n    </Helmet>\n  );\n};\n\nexport default MetaData;\n","import React from \"react\";\nimport \"./Loader.css\";\n\nconst Loader = () => {\n  return (\n    <div className=\"loading\">\n      <div></div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport \"./UpdateProfile.css\";\nimport Loader from \"../layout/Loader/Loader\";\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\nimport FaceIcon from \"@material-ui/icons/Face\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { clearErrors, updateProfile, loadUser } from \"../../actions/userAction\";\nimport { useAlert } from \"react-alert\";\nimport { UPDATE_PROFILE_RESET } from \"../../constants/userConstants\";\nimport MetaData from \"../layout/MetaData\";\nimport imageCompression from 'browser-image-compression'\n\nconst UpdateProfile = ({ history }) => {\n  const dispatch = useDispatch();\n  const alert = useAlert();\n\n  const { user } = useSelector((state) => state.user);\n  const { error, isUpdated, loading } = useSelector((state) => state.profile);\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n  const [avatarPreview, setAvatarPreview] = useState(\"/Profile.png\");\n\n  const updateProfileSubmit = (e) => {\n    e.preventDefault();\n    const myForm = new FormData();\n    myForm.set(\"name\", name);\n    myForm.set(\"email\", email);\n    myForm.set(\"avatar\", avatar);\n    dispatch(updateProfile(myForm));\n  };\n  const updateProfileDataChange = (event) => {\n    const withoutCompress = (img) => {\n      if (img) {\n        const fileReader = new FileReader();\n        fileReader.onload = (e) => {\n          const { result } = e.target;\n          if (fileReader.readyState === 2) {\n            setAvatarPreview(fileReader.result);\n          }\n          if (result) {\n            setAvatar(result);\n          }\n        }\n        fileReader.readAsDataURL(img);\n      }\n    }\n    const e = event.target.files[0]\n    if (e.type === 'image/jpeg' || e.type === 'image/png' || e.type === 'image/jpg' || e.type === 'image/bmp' || e.type === 'image/webp') {\n      const reader = new FileReader();\n      reader.onload = () => {\n        if (reader.readyState === 2) {\n          setAvatarPreview((old) => [...old, reader.result]);\n        }\n      };\n      reader.readAsDataURL(e);\n      if (e.size > 90000) {\n        async function handleImageUpload(event) {\n          const imageFile = event\n          const options = {\n            maxSizeMB: 1,\n            maxWidthOrHeight: 1920,\n            useWebWorker: true,\n            initialQuality: 0.7,\n            fileType: 'image/jpeg'\n          }\n          try {\n            const compressedFile = await imageCompression(imageFile, options)\n            imageCompression.getDataUrlFromFile(compressedFile).then(res => {\n              setAvatar(res)\n              setAvatarPreview(res)\n            })\n          } catch (error) {\n            console.log(error)\n          }\n        }\n        handleImageUpload(e)\n      } else {\n        withoutCompress(e)\n      }\n    } else {\n      alert.error(\"only .jpeg,.jpg,.png, and .webp formats are allowed\")\n    }\n  };\n  useEffect(() => {\n    if (user) {\n      setName(user.name);\n      setEmail(user.email);\n      setAvatarPreview(user.avatar.url);\n    }\n\n    if (error) {\n      alert.error(error);\n      dispatch(clearErrors());\n    }\n\n    if (isUpdated) {\n      alert.success(\"Profile Updated Successfully\");\n      dispatch(loadUser());\n\n      history.push(\"/account\");\n\n      dispatch({\n        type: UPDATE_PROFILE_RESET,\n      });\n    }\n  }, [dispatch, error, alert, history, user, isUpdated]);\n  return (\n    <Fragment>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Fragment>\n          <MetaData title=\"Update Profile\" />\n          <div className=\"updateProfileContainer\">\n            <div className=\"updateProfileBox\">\n              <h2 className=\"updateProfileHeading\">Update Profile</h2>\n\n              <form\n                className=\"updateProfileForm\"\n                encType=\"multipart/form-data\"\n                onSubmit={updateProfileSubmit}\n              >\n                <div className=\"updateProfileName\">\n                  <FaceIcon />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Name\"\n                    required\n                    name=\"name\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                  />\n                </div>\n                <div className=\"updateProfileEmail\">\n                  <MailOutlineIcon />\n                  <input\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    required\n                    name=\"email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                  />\n                </div>\n                <img style={{ objectFit: 'contain', margin: '10px 0px' }} src={avatarPreview} width='150' alt=\"Avatar Preview\" />\n                <div id=\"updateProfileImage\">\n                  <input\n                    type=\"file\"\n                    name=\"avatar\"\n                    accept=\"image/*\"\n                    onChange={updateProfileDataChange}\n                  />\n                </div>\n                <input\n                  type=\"submit\"\n                  value=\"Update\"\n                  className=\"updateProfileBtn\"\n                  style={{ marginTop: '2px' }}\n                />\n              </form>\n            </div>\n          </div>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nexport default UpdateProfile;\n"],"sourceRoot":""}