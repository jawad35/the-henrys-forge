{"version":3,"sources":["component/layout/MetaData.js","component/layout/Loader/Loader.js","component/User/UpdateProfile.js"],"names":["MetaData","_ref","title","_jsx","Helmet","children","Loader","className","UpdateProfile","history","dispatch","useDispatch","alert","useAlert","user","useSelector","state","error","isUpdated","loading","profile","name","setName","useState","email","setEmail","avatar","setAvatar","avatarPreview","setAvatarPreview","useEffect","url","clearErrors","success","loadUser","push","type","UPDATE_PROFILE_RESET","Fragment","_jsxs","encType","onSubmit","e","preventDefault","myForm","FormData","set","updateProfile","FaceIcon","placeholder","required","value","onChange","target","MailOutlineIcon","style","objectFit","margin","src","width","alt","id","accept","event","files","reader","FileReader","onload","readyState","old","result","readAsDataURL","size","async","handleImageUpload","imageFile","options","maxSizeMB","maxWidthOrHeight","useWebWorker","initialQuality","fileType","compressedFile","imageCompression","getDataUrlFromFile","then","res","console","log","img","fileReader","withoutCompress","marginTop"],"mappings":"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","file":"static/js/44.cbc8c9c0.chunk.js","sourcesContent":["import React from \"react\";\nimport Helmet from \"react-helmet\";\n\nconst MetaData = ({ title }) => {\n  return (\n    <Helmet>\n      <title>{title}</title>\n    </Helmet>\n  );\n};\n\nexport default MetaData;\n","import React from \"react\";\nimport \"./Loader.css\";\n\nconst Loader = () => {\n  return (\n    <div className=\"loading\">\n      <div></div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport \"./UpdateProfile.css\";\nimport Loader from \"../layout/Loader/Loader\";\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\nimport FaceIcon from \"@material-ui/icons/Face\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { clearErrors, updateProfile, loadUser } from \"../../actions/userAction\";\nimport { useAlert } from \"react-alert\";\nimport { UPDATE_PROFILE_RESET } from \"../../constants/userConstants\";\nimport MetaData from \"../layout/MetaData\";\nimport imageCompression from 'browser-image-compression'\n\nconst UpdateProfile = ({ history }) => {\n  const dispatch = useDispatch();\n  const alert = useAlert();\n\n  const { user } = useSelector((state) => state.user);\n  const { error, isUpdated, loading } = useSelector((state) => state.profile);\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n  const [avatarPreview, setAvatarPreview] = useState(\"/Profile.png\");\n\n  const updateProfileSubmit = (e) => {\n    e.preventDefault();\n    const myForm = new FormData();\n    myForm.set(\"name\", name);\n    myForm.set(\"email\", email);\n    myForm.set(\"avatar\", avatar);\n    dispatch(updateProfile(myForm));\n  };\n  const updateProfileDataChange = (event) => {\n    const withoutCompress = (img) => {\n      if (img) {\n        const fileReader = new FileReader();\n        fileReader.onload = (e) => {\n          const { result } = e.target;\n          if (fileReader.readyState === 2) {\n            setAvatarPreview(fileReader.result);\n          }\n          if (result) {\n            setAvatar(result);\n          }\n        }\n        fileReader.readAsDataURL(img);\n      }\n    }\n    const e = event.target.files[0]\n    if (e.type === 'image/jpeg' || e.type === 'image/png' || e.type === 'image/jpg' || e.type === 'image/bmp' || e.type === 'image/webp') {\n      const reader = new FileReader();\n      reader.onload = () => {\n        if (reader.readyState === 2) {\n          setAvatarPreview((old) => [...old, reader.result]);\n        }\n      };\n      reader.readAsDataURL(e);\n      if (e.size > 90000) {\n        async function handleImageUpload(event) {\n          const imageFile = event\n          const options = {\n            maxSizeMB: 1,\n            maxWidthOrHeight: 1920,\n            useWebWorker: true,\n            initialQuality: 0.7,\n            fileType: 'image/jpeg'\n          }\n          try {\n            const compressedFile = await imageCompression(imageFile, options)\n            imageCompression.getDataUrlFromFile(compressedFile).then(res => {\n              setAvatar(res)\n              setAvatarPreview(res)\n            })\n          } catch (error) {\n            console.log(error)\n          }\n        }\n        handleImageUpload(e)\n      } else {\n        withoutCompress(e)\n      }\n    } else {\n      alert.error(\"only .jpeg,.jpg,.png, and .webp formats are allowed\")\n    }\n  };\n  useEffect(() => {\n    if (user) {\n      setName(user.name);\n      setEmail(user.email);\n      setAvatarPreview(user.avatar.url);\n    }\n\n    if (error) {\n      alert.error(error);\n      dispatch(clearErrors());\n    }\n\n    if (isUpdated) {\n      alert.success(\"Profile Updated Successfully\");\n      dispatch(loadUser());\n\n      history.push(\"/account\");\n\n      dispatch({\n        type: UPDATE_PROFILE_RESET,\n      });\n    }\n  }, [dispatch, error, alert, history, user, isUpdated]);\n  return (\n    <Fragment>\n      {loading ? (\n        <Loader />\n      ) : (\n        <Fragment>\n          <MetaData title=\"Update Profile\" />\n          <div className=\"updateProfileContainer\">\n            <div className=\"updateProfileBox\">\n              <h2 className=\"updateProfileHeading\">Update Profile</h2>\n\n              <form\n                className=\"updateProfileForm\"\n                encType=\"multipart/form-data\"\n                onSubmit={updateProfileSubmit}\n              >\n                <div className=\"updateProfileName\">\n                  <FaceIcon />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Name\"\n                    required\n                    name=\"name\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                  />\n                </div>\n                <div className=\"updateProfileEmail\">\n                  <MailOutlineIcon />\n                  <input\n                    type=\"email\"\n                    placeholder=\"Email\"\n                    required\n                    name=\"email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                  />\n                </div>\n                <img style={{ objectFit: 'contain', margin: '10px 0px' }} src={avatarPreview} width='150' alt=\"Avatar Preview\" />\n                <div id=\"updateProfileImage\">\n                  <input\n                    type=\"file\"\n                    name=\"avatar\"\n                    accept=\"image/*\"\n                    onChange={updateProfileDataChange}\n                  />\n                </div>\n                <input\n                  type=\"submit\"\n                  value=\"Update\"\n                  className=\"updateProfileBtn\"\n                  style={{ marginTop: '2px' }}\n                />\n              </form>\n            </div>\n          </div>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nexport default UpdateProfile;\n"],"sourceRoot":""}